// controllers/adminDashboardController.js
const mongoose = require('mongoose');
const Teacher = require('../../models/teacher');
const TeacherAttendance = require('../../models/teacherAttendance');
const TeacherAbsence = require('../../models/teacherAbsence');
const Holiday = require('../../models/holiday');
const School = require('../../models/school');
const APIError = require('../../utils/apiError');


const getAllTeacherDashboard = async (user) => {
  try {
    const { schoolId, activeAcademicYear: academicYearId } = user;
    if (!mongoose.Types.ObjectId.isValid(schoolId) || !mongoose.Types.ObjectId.isValid(academicYearId)) {
      throw new APIError('Invalid school ID or academic year ID', 400);
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0);
    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);

    // Total active teachers
    const totalActiveTeachers = await Teacher.countDocuments({
      schoolId: new mongoose.Types.ObjectId(schoolId),
      academicYearId: new mongoose.Types.ObjectId(academicYearId),
      status: true
    });

    return { totalActiveTeachers };
  } catch (error) {
    throw error; // Propagate error to be caught by the route
  }
};

const getTeacherDashboard = async (req, res, next) => {
  try {
    const { schoolId, activeAcademicYear: academicYearId } = req.user;
    if (!mongoose.Types.ObjectId.isValid(schoolId) || !mongoose.Types.ObjectId.isValid(academicYearId)) {
      throw new APIError('Invalid school ID or academic year ID', 400);
    }

    const today = new Date();
    today.setHours(0, 0, 0, 0); // Set to start of day in local timezone (assuming IST)
    const tomorrow = new Date(today.getTime() + 24 * 60 * 60 * 1000);

    // Debug: Log the date range being queried
    console.log('Querying date range:', {
      today: today.toISOString(),
      tomorrow: tomorrow.toISOString(),
      schoolId,
      academicYearId
    });

    // Check if today is a holiday or weekly off
    let isHoliday = false;
    const school = await School.findById(schoolId).select('weeklyHolidayDay');
    const todayDay = today.toLocaleString('en-us', { weekday: 'long' });
    if (school && school.weeklyHolidayDay === todayDay) {
      isHoliday = true;
    } else {
      const holiday = await Holiday.findOne({
        schoolId: new mongoose.Types.ObjectId(schoolId),
        date: { $gte: today, $lt: tomorrow }
      });
      if (holiday) isHoliday = true;
    }

    // Total active teachers
    const totalTeachers = await Teacher.countDocuments({
      schoolId: new mongoose.Types.ObjectId(schoolId),
      academicYearId: new mongoose.Types.ObjectId(academicYearId),
      status: true
    });

    // Present today (only if not holiday)
    let presentToday = 0;
    if (!isHoliday) {
      const presentAgg = await TeacherAttendance.aggregate([
        {
          $match: {
            schoolId: new mongoose.Types.ObjectId(schoolId),
            academicYearId: new mongoose.Types.ObjectId(academicYearId),
            date: { $gte: today, $lt: tomorrow },
            status: 'Present'
          }
        },
        { $count: 'count' }
      ]);

      presentToday = presentAgg.length > 0 ? presentAgg[0].count : 0;
    }

    // On Leave today
    let onLeaveToday = 0;
    if (!isHoliday) {
      const onLeaveAgg = await TeacherAbsence.aggregate([
        {
          $match: {
            schoolId: new mongoose.Types.ObjectId(schoolId),
            academicYearId: new mongoose.Types.ObjectId(academicYearId),
            date: { $gte: today, $lt: tomorrow },
            status: 'Approved'
          }
        },
        { $count: 'count' }
      ]);

      // Debug: Log the onLeave aggregation result
      console.log('On Leave aggregation result:', onLeaveAgg);

      onLeaveToday = onLeaveAgg.length > 0 ? onLeaveAgg[0].count : 0;
    }

    // Absent today: Total - Present - On Leave
    const absentToday = isHoliday ? 0 : totalTeachers - presentToday - onLeaveToday;

    // Pending Leave Requests
    const pendingLeaveRequests = await TeacherAbsence.countDocuments({
      schoolId: new mongoose.Types.ObjectId(schoolId),
      academicYearId: new mongoose.Types.ObjectId(academicYearId),
      status: 'Pending',
      isTeacherApplied: true
    });

    // Auto-Generated Absences
    const autoGeneratedAbsences = await TeacherAbsence.countDocuments({
      schoolId: new mongoose.Types.ObjectId(schoolId),
      academicYearId: new mongoose.Types.ObjectId(academicYearId),
      status: 'Pending',
      isTeacherApplied: false
    });

    // Average Leave Balance
    const avgLeaveBalanceAgg = await Teacher.aggregate([
      {
        $match: {
          schoolId: new mongoose.Types.ObjectId(schoolId),
          academicYearId: new mongoose.Types.ObjectId(academicYearId),
          status: true
        }
      },
      {
        $group: {
          _id: null,
          average: { $avg: '$leaveBalance' }
        }
      }
    ]);
    const averageLeaveBalance = avgLeaveBalanceAgg.length > 0 ? avgLeaveBalanceAgg[0].average : 0;

    // Leave types breakdown today
    const leaveTypesToday = await TeacherAbsence.aggregate([
      {
        $match: {
          schoolId: new mongoose.Types.ObjectId(schoolId),
          academicYearId: new mongoose.Types.ObjectId(academicYearId),
          date: { $gte: today, $lt: tomorrow },
          status: 'Approved'
        }
      },
      {
        $group: {
          _id: '$leaveType',
          count: { $sum: 1 }
        }
      }
    ]);

    const leaveBreakdown = { Casual: 0, Sick: 0, Unpaid: 0 };
    leaveTypesToday.forEach(item => {
      if (item._id in leaveBreakdown) leaveBreakdown[item._id] = item.count;
    });

    res.json({
      totalTeachers,
      presentToday,
      absentToday,
      onLeaveToday,
      pendingLeaveRequests,
      autoGeneratedAbsences,
      averageLeaveBalance,
      leaveBreakdown,
      isHoliday
    });
  } catch (error) {
    next(error);
  }
};

module.exports = { getTeacherDashboard ,getAllTeacherDashboard};